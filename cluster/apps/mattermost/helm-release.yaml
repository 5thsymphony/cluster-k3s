---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: mattermost
  namespace: mattermost
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://helm.mattermost.com
      chart: mattermost-team-edition
      version: 6.1.0
      sourceRef:
        kind: HelmRepository
        name: mattermost-charts
        namespace: flux-system
      interval: 5m
  values:
    fullnameOverride: mattermost

    # Default values for mattermost-team-edition.
    # This is a YAML-formatted file.
    # Declare variables to be passed into your templates.
    image:
      repository: mattermost/mattermost-team-edition
      tag: 6.1.0@sha256:3893b46939331ef7c3d02661f9040c2d8cf02970a19e839194dcd1041cc626f1
      imagePullPolicy: IfNotPresent

    initContainerImage:
      repository: appropriate/curl
      tag: latest
      imagePullPolicy: IfNotPresent

    ## Deployment Strategy
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    deploymentStrategy:
      type: RollingUpdate
      rollingUpdate: null

    ## How many old ReplicaSets for Mattermost Deployment you want to retain
    revisionHistoryLimit: 1

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ## ref: https://docs.gitlab.com/ee/install/requirements.html#storage
    ##
    persistence:
      ## This volume persists generated data from users, like images, attachments...
      ##
      data:
        enabled: true
        size: 20Gi
        ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
        ## Default: volume.alpha.kubernetes.io/storage-class: default
        ##
        storageClass: "ceph-block"
        accessMode: ReadWriteOnce
      # existingClaim: ""
      plugins:
        enabled: true
        size: 1Gi
        ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
        ## Default: volume.alpha.kubernetes.io/storage-class: default
        ##
        storageClass: "ceph-block"
        accessMode: ReadWriteOnce
      # existingClaim: ""

    service:
      type: ClusterIP
      externalPort: 8065
      internalPort: 8065
      annotations: {}
      # loadBalancerIP:
      loadBalancerSourceRanges: []

    ingress:
      enabled: true
      ingressClassName: "traefik"
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-production"
        traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
      hosts:
        - "mm.${SECRET_DOMAIN}"
      tls:
        - hosts:
            - "mm.${SECRET_DOMAIN}"
          secretName: "authentik-tls"

    route:
      enabled: false

    ## If use this please disable the mysql chart by setting mysql.enable to false
    externalDB:
      enabled: false

      ## postgres or mysql
      externalDriverType: ""

      ## postgres:  "<USERNAME>:<PASSWORD>@<HOST>:5432/<DATABASE_NAME>?sslmode=disable&connect_timeout=10"
      ## mysql:     "<USERNAME>:<PASSWORD>@tcp(<HOST>:3306)/<DATABASE_NAME>?charset=utf8mb4,utf8&readTimeout=30s&writeTimeout=30s"
      externalConnectionString: ""

    mysql:
      enabled: true
      mysqlRootPassword: ""

      mysqlUser:  mattermost
      mysqlDatabase: mattermost
      mysqlPassword: "${SECRET_MATTERMOST_MYSQL_PASSWORD}"

      persistence:
        enabled: true
        ## If defined, storageClassName: <storageClass>
        ## If set to "-", storageClassName: "", which disables dynamic provisioning
        ## If undefined (the default) or set to null, no storageClassName spec is
        ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
        ##   GKE, AWS & OpenStack)
        ##
        storageClass: "ceph-block"
        accessMode: ReadWriteOnce
        size: 10Gi
      # existingClaim: ""

    ## Additional pod annotations
    extraPodAnnotations: {}

    # Add additional volumes and mounts, for example to add SAML keys in the app or other files the app server may need to access
    extraVolumes: []
      # - hostPath:
      #     path: /var/log
      #   name: varlog
    extraVolumeMounts: []
      # - name: varlog
      #   mountPath: /host/var/log
      #   readOnly: true

    ## Node selector
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    nodeSelector: {}

    ## Affinity
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    affinity: {}

    ## Tolerations for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    tolerations: []

    ## Pod Security Context
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    securityContext:
      # fsGroup: 2000
      # runAsGroup: 2000
      # runAsUser: 2000

    serviceAccount:
      create: false
      name:
      annotations: {}

    ## Configuration
    ## The config here will be injected as environment variables in the deployment
    ## Please refer to https://docs.mattermost.com/administration/config-settings.html#configuration-in-database for more information
    ## You can add any config here, but need to respect the format: MM_<GROUPSECTION>_<SETTING>. ie: MM_SERVICESETTINGS_ENABLECOMMANDS: false
    config:
      MM_PLUGINSETTINGS_CLIENTDIRECTORY: "./client/plugins"
